# -*- coding: utf-8 -*-
"""AutoML_Flask.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LJkBedy7eagcIYCdnlccat6OA4xJ8sOA
"""

from flask import Flask, render_template, request

import automl_classification
import automl_regression

"""# New Section"""

# !pip install flask-ngrok

#from flask_ngrok import run_with_ngrok

app = Flask(__name__)
#run_with_ngrok(app)
app.config['SECRET_KEY']='406cdbd39813edf0971d172ecca5a620'

# !pip install flask_wtf

from flask_wtf import FlaskForm

from automl_forms import UrlForm

# @app.route("/",methods = ['GET','POST'])
# def home():
#   return render_template('home.html', form=form)

@app.route("/", methods = ['GET','POST'])
def pred():
  
  form = UrlForm()
  if request.method == 'POST':
    given_url = request.form.to_dict()

    if form.is_submitted():

      if given_url['problem_type'] == 'Classification':

        try:
          obj = automl_classification.DataProcess(given_url['url'],given_url['problem_type'])
          parameters_to_display = obj.out_filtered.featureengineeringandselection.model_score.best_model_params
          model_name = parameters_to_display.iloc[0,0]   # getting Model_name
          best_params = parameters_to_display.iloc[0,2]  # getting best_score
          features = obj.out_filtered.featureengineeringandselection.all_feature_selected
          return render_template('newindex.html', form=form, model_name = model_name, best_params = best_params, features=features)
        
        except:
          # flash('Something Went Wrong')
          return render_template('newindex.html', form=form, fallback_text='Something Went Wrong.', model_name = '  -', best_params = '', features='  -')
      else:

        try:
          obj = automl_regression.DataProcess(given_url['url'],given_url['problem_type'])
          parameters_to_display = obj.out_filtered.fs_regression.model_score.best_model_params
          model_name = parameters_to_display.iloc[0,0]   # getting Model_name
          best_params = parameters_to_display.iloc[0,2]  # getting best_score
          features = obj.out_filtered.fs_regression.all_features_selected
          return render_template('newindex.html', form=form, model_name = model_name, best_params = best_params, features=features, fallback_text='')
        
        except:
          # flash('Something Went Wrong')
          return render_template('newindex.html', form=form, fallback_text='Something Went Wrong.', model_name = '  -', best_params = '', features='  -')

        # return render_template('newindex.html', form=form, url_passed='else part')
    
  return render_template('newindex.html', form=form, model_name = '  -', best_params = '', features='  -', fallback_text='')

@app.route("/Guidelines")     
def guidelines():
  return render_template('guidelines.html')

if __name__ == "__main__":
    app.run(debug=True)

#obj = automl_classification.DataProcess('https://raw.githubusercontent.com/ketangangal/HeartDiseaseEstimator/master/csvFiles/Feature_correction.csv','classification')



